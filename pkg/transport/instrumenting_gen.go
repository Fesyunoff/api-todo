//+build !swipe

// Code generated by Swipe v2.0.0-beta6. DO NOT EDIT.

package transport

import (
	"context"
	"time"

	"github.com/fesyunoff/api/pkg/controller"
	"github.com/fesyunoff/api/pkg/controller/dto"
	"github.com/go-kit/kit/metrics"
	prometheus2 "github.com/go-kit/kit/metrics/prometheus"
	"github.com/prometheus/client_golang/prometheus"
)

type instrumentingOpts struct {
	requestCount   metrics.Counter
	requestLatency metrics.Histogram
	namespace      string
	subsystem      string
}

type InstrumentingOption func(*instrumentingOpts)

func Namespace(v string) InstrumentingOption {
	return func(o *instrumentingOpts) {
		o.namespace = v
	}
}

func Subsystem(v string) InstrumentingOption {
	return func(o *instrumentingOpts) {
		o.subsystem = v
	}
}

func RequestLatency(requestLatency metrics.Histogram) InstrumentingOption {
	return func(o *instrumentingOpts) {
		o.requestLatency = requestLatency
	}
}

func RequestCount(requestCount metrics.Counter) InstrumentingOption {
	return func(o *instrumentingOpts) {
		o.requestCount = requestCount
	}
}

type ServiceInstrumentingMiddleware struct {
	next controller.Service
	opts *instrumentingOpts
}

func (s *ServiceInstrumentingMiddleware) Add(ctx context.Context, task dto.Task) (string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "Add").Add(1)
		s.opts.requestLatency.With("method", "Add").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.Add(ctx, task)
}

func (s *ServiceInstrumentingMiddleware) CreateUser(ctx context.Context, user dto.User) (string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "CreateUser").Add(1)
		s.opts.requestLatency.With("method", "CreateUser").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.CreateUser(ctx, user)
}

func (s *ServiceInstrumentingMiddleware) Delete(ctx context.Context, task dto.Task) (string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "Delete").Add(1)
		s.opts.requestLatency.With("method", "Delete").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.Delete(ctx, task)
}

func (s *ServiceInstrumentingMiddleware) DeleteUser(ctx context.Context, user dto.User) (string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "DeleteUser").Add(1)
		s.opts.requestLatency.With("method", "DeleteUser").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.DeleteUser(ctx, user)
}

func (s *ServiceInstrumentingMiddleware) Get(ctx context.Context, task dto.Task) ([]*dto.Task, string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "Get").Add(1)
		s.opts.requestLatency.With("method", "Get").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.Get(ctx, task)
}

func (s *ServiceInstrumentingMiddleware) GetUsers(ctx context.Context, user dto.User) ([]*dto.User, string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "GetUsers").Add(1)
		s.opts.requestLatency.With("method", "GetUsers").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.GetUsers(ctx, user)
}

func (s *ServiceInstrumentingMiddleware) Update(ctx context.Context, task dto.Task) (string, error) {
	defer func(begin time.Time) {
		s.opts.requestCount.With("method", "Update").Add(1)
		s.opts.requestLatency.With("method", "Update").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.Update(ctx, task)
}

func NewInstrumentingServiceMiddleware(s controller.Service, opts ...InstrumentingOption) controller.Service {
	i := &ServiceInstrumentingMiddleware{next: s, opts: &instrumentingOpts{}}
	for _, o := range opts {
		o(i.opts)
	}
	if i.opts.requestCount == nil {
		i.opts.requestCount = prometheus2.NewCounterFrom(prometheus.CounterOpts{
			Namespace: i.opts.namespace,
			Subsystem: i.opts.subsystem,
			Name:      "request_count",
			Help:      "Number of requests received.",
		}, []string{"method"})

	}
	if i.opts.requestLatency == nil {
		i.opts.requestLatency = prometheus2.NewSummaryFrom(prometheus.SummaryOpts{
			Namespace: i.opts.namespace,
			Subsystem: i.opts.subsystem,
			Name:      "request_latency_microseconds",
			Help:      "Total duration of requests in microseconds.",
		}, []string{"method"})

	}
	return i
}
