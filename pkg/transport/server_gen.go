//+build !swipe

// Code generated by Swipe v2.0.0-beta6. DO NOT EDIT.

package transport

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/fesyunoff/api/pkg/controller"
	"github.com/gorilla/mux"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
	"github.com/pquerna/ffjson/ffjson"
)

func MergeEndpointCodecMaps(ecms ...jsonrpc.EndpointCodecMap) jsonrpc.EndpointCodecMap {
	mergedECM := make(jsonrpc.EndpointCodecMap, 512)
	for _, ecm := range ecms {
		for key, codec := range ecm {
			mergedECM[key] = codec
		}
	}
	return mergedECM
}
func encodeResponseJSONRPC(_ context.Context, result interface{}) (json.RawMessage, error) {
	b, err := ffjson.Marshal(result)
	if err != nil {
		return nil, err
	}
	return b, nil
}

func MakeServiceEndpointCodecMap(ep ServiceEndpointSet, ns ...string) jsonrpc.EndpointCodecMap {
	var namespace string
	if len(ns) > 0 {
		namespace = strings.Join(ns, ".") + "."
	}
	ecm := jsonrpc.EndpointCodecMap{}
	if ep.AddEndpoint != nil {
		ecm[namespace+"add"] = jsonrpc.EndpointCodec{
			Endpoint: ep.AddEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req AddRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to AddRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.CreateUserEndpoint != nil {
		ecm[namespace+"createUser"] = jsonrpc.EndpointCodec{
			Endpoint: ep.CreateUserEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req CreateUserRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to CreateUserRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.DeleteEndpoint != nil {
		ecm[namespace+"delete"] = jsonrpc.EndpointCodec{
			Endpoint: ep.DeleteEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req DeleteRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to DeleteRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.DeleteUserEndpoint != nil {
		ecm[namespace+"deleteUser"] = jsonrpc.EndpointCodec{
			Endpoint: ep.DeleteUserEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req DeleteUserRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to DeleteUserRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.GetEndpoint != nil {
		ecm[namespace+"get"] = jsonrpc.EndpointCodec{
			Endpoint: ep.GetEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req GetRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to GetRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.GetUsersEndpoint != nil {
		ecm[namespace+"getUsers"] = jsonrpc.EndpointCodec{
			Endpoint: ep.GetUsersEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req GetUsersRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to GetUsersRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.UpdateEndpoint != nil {
		ecm[namespace+"update"] = jsonrpc.EndpointCodec{
			Endpoint: ep.UpdateEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req UpdateRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to UpdateRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	return ecm
}

// HTTP JSONRPC Transport
func MakeHandlerJSONRPC(svcService controller.Service, options ...ServerOption) (http.Handler, error) {
	opts := &serverOpts{}
	for _, o := range options {
		o(opts)
	}
	epSet := MakeServiceEndpointSet(svcService)
	epSet.AddEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceAddEndpointMiddleware...))(epSet.AddEndpoint)
	epSet.CreateUserEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceCreateUserEndpointMiddleware...))(epSet.CreateUserEndpoint)
	epSet.DeleteEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceDeleteEndpointMiddleware...))(epSet.DeleteEndpoint)
	epSet.DeleteUserEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceDeleteUserEndpointMiddleware...))(epSet.DeleteUserEndpoint)
	epSet.GetEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceGetEndpointMiddleware...))(epSet.GetEndpoint)
	epSet.GetUsersEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceGetUsersEndpointMiddleware...))(epSet.GetUsersEndpoint)
	epSet.UpdateEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceUpdateEndpointMiddleware...))(epSet.UpdateEndpoint)
	r := mux.NewRouter()
	handler := jsonrpc.NewServer(MakeServiceEndpointCodecMap(epSet), opts.genericServerOption...)
	r.Methods("POST").Path("/{method:.*}").Handler(handler)
	return r, nil
}
