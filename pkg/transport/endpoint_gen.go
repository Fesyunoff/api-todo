//+build !swipe

// Code generated by Swipe v2.0.0-beta6. DO NOT EDIT.

package transport

import (
	"context"

	"github.com/fesyunoff/api/pkg/controller"
	"github.com/fesyunoff/api/pkg/controller/dto"
	"github.com/go-kit/kit/endpoint"
)

func makeServiceAddEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(AddRequest)
		result, err := s.Add(ctx, req.Task)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func makeServiceCreateUserEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateUserRequest)
		result, err := s.CreateUser(ctx, req.User)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func makeServiceDeleteEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteRequest)
		result, err := s.Delete(ctx, req.Task)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func makeServiceDeleteUserEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteUserRequest)
		result, err := s.DeleteUser(ctx, req.User)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func makeServiceGetEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetRequest)
		out, msg, err := s.Get(ctx, req.Task)
		if err != nil {
			return nil, err
		}
		return GetResponse{Out: out, Msg: msg}, nil
	}

}

func makeServiceGetUsersEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetUsersRequest)
		out, msg, err := s.GetUsers(ctx, req.User)
		if err != nil {
			return nil, err
		}
		return GetUsersResponse{Out: out, Msg: msg}, nil
	}

}

func makeServiceUpdateEndpoint(s controller.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(UpdateRequest)
		result, err := s.Update(ctx, req.Task)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

type ServiceEndpointSet struct {
	AddEndpoint        endpoint.Endpoint
	CreateUserEndpoint endpoint.Endpoint
	DeleteEndpoint     endpoint.Endpoint
	DeleteUserEndpoint endpoint.Endpoint
	GetEndpoint        endpoint.Endpoint
	GetUsersEndpoint   endpoint.Endpoint
	UpdateEndpoint     endpoint.Endpoint
}

func MakeServiceEndpointSet(svc controller.Service) ServiceEndpointSet {
	return ServiceEndpointSet{
		AddEndpoint:        makeServiceAddEndpoint(svc),
		CreateUserEndpoint: makeServiceCreateUserEndpoint(svc),
		DeleteEndpoint:     makeServiceDeleteEndpoint(svc),
		DeleteUserEndpoint: makeServiceDeleteUserEndpoint(svc),
		GetEndpoint:        makeServiceGetEndpoint(svc),
		GetUsersEndpoint:   makeServiceGetUsersEndpoint(svc),
		UpdateEndpoint:     makeServiceUpdateEndpoint(svc),
	}
}

type AddRequest struct {
	Task dto.Task `json:"task"`
}
type CreateUserRequest struct {
	User dto.User `json:"user"`
}
type DeleteRequest struct {
	Task dto.Task `json:"task"`
}
type DeleteUserRequest struct {
	User dto.User `json:"user"`
}
type GetRequest struct {
	Task dto.Task `json:"task"`
}
type GetResponse struct {
	Out []*dto.Task `json:"out"`
	Msg string      `json:"msg"`
}
type GetUsersRequest struct {
	User dto.User `json:"user"`
}
type GetUsersResponse struct {
	Out []*dto.User `json:"out"`
	Msg string      `json:"msg"`
}
type UpdateRequest struct {
	Task dto.Task `json:"task"`
}
